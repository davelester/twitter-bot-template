// Generated by CoffeeScript 1.7.1
(function() {
  var Twit, argv, getConfig, isOfWrongFromat, main, minimist, processTweet, respondToTweet, solve;

  Twit = require('twit');

  minimist = require('minimist');

  argv = minimist(process.argv.slice(2), {
    "default": {
      verbose: false,
      config: './config.json'
    }
  });

  getConfig = function(path) {
    if (path[0] !== '/' && path.slice(0, 2) !== './') {
      path = './' + path;
    }
    return require(path);
  };

  respondToTweet = function(T, status, tweet) {
    console.log("responding to the tweet " + tweet.text);
    console.log("response is " + status);
    if (status !== "-1") {
      return T.post('statuses/update', {
        status: status,
        in_reply_to_status_id: tweet.id_str
      }, function(err) {
        return console.log("tweet posted");
      });
    }
  };

  processTweet = function(tweet) {
    var response, solution, tweetTextIsOfWrongFormat;
    tweetTextIsOfWrongFormat = isOfWrongFromat(tweet.text);
    if (tweetTextIsOfWrongFormat === true) {
      return "-1";
    } else {
      solution = solve(tweet.text);
      response = "@" + tweet.user.screen_name + " " + solution;
      console.log("processTweet response is " + response);
      return response.substr(0, 140);
    }
  };

  solve = function(tweetText) {
    return "";
  };

  isOfWrongFromat = function(tweetText) {
    return false;
  };

  main = function() {
    var T, config, me, stream;
    config = getConfig(argv.config);
    T = new Twit(config.account);
    me = config.nick;
    stream = T.stream('user', {
      track: me
    }, function(err) {
      if (err) {
        return console.log(err);
      }
    });
    stream.on('tweet', function(tweet) {
      var response;
      console.log("stream tweet event");
      console.log(tweet);
      response = processTweet(tweet);
      return respondToTweet(T, response, tweet);
    });
    stream.on('warning', function(err) {
      return console.log("stream warning event");
    });
    stream.on('connect', function(err) {
      return console.log("stream connect event");
    });
    stream.on('reconnect', function(err) {
      return console.log("stream reconnect event");
    });
    stream.on('connected', function(err) {
      return console.log("stream connected event");
    });
    return stream.on('error', function(err) {
      return console.log("stream error event");
    });
  };

  if (require.main === module) {
    main();
  }

  exports.main = main;

  exports.processTweet = processTweet;

  exports.respondToTweet = respondToTweet;

  exports.isOfWrongFromat = isOfWrongFromat;

  exports.solve = solve;

  exports.getConfig = getConfig;

}).call(this);
